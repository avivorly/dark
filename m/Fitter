{"name": "Fitter", "keys": [], "views": {"graph": [{"title": {"type": "string", "value": "fit"}, "func": [{"xy": {"type": "code", "value": "[xs,ys]"}}], "hist": [{"data": {"type": "code", "value": "data"}}]}]}, "code": "from numpy import exp\nfrom ROOTFitter import ROOTFitter\nr = ROOTFitter()\nr.ROOT = {'TF1':TF1,'gRandom':gRandom,'TH1F':TH1F}\nROOTFitter.ROOT = {'TF1':TF1,'gRandom':gRandom,'TH1F':TH1F}\no = {'virtual count': 1, 'number 0': 1000, 'median 0': 0, 'sigma 0': 3}\n\ndata = self.data.flatten()\n\noo = {'virtual count': 1, 'simnum': 0, 'gausCount': 3, 'minRange': -150, 'maxRange': 700, 'y max': 0, 'showMin': -150, 'showMax': 600, 'bins': 2000, 'decimal places': 3, 'isFree': False, 'gamma': '0.2', 'params': 'N', 'min 0': -100, 'max 0': 100, 'min 1': 200, 'max 1': 500, 'min 2': 500, 'max 2': 700, 'number 0': 10000, 'median 0': 0, 'sigma 0': 47}\ndic = r.GausFit(data,oo)\n\n\nls = []\ndic_copy = dic.copy()\ndic_copy.pop('func')\n\nfor k, vls in dic_copy.items():\n    va, er = map(lambda value: str(round(value, 3)), vls)\n    ls.append(k)\n\nf = r.analizeFunc(dic['func'], replace=True)\n\n\n\n\nv = np.linspace(-300, 300, 1000)\nfrom numpy import exp\nprint('f:')\nprint(f)\ndef p(x):\n    from numpy import exp\n    print(f)\n    y = eval(f)\n    # print(y)\n    return y\n\n\nxs,ys = [],[]\nfor val in v:\n    xs.append(v)\n    ys.append(p(v))\n\n\n\n\n\n", "active": 2}